name: Practical Email Management

on:
  push:
    paths:
      - 'PracticalEmailManagement/**'
      - '.github/workflows/practical_email_management.yml'

jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-latest
    outputs:
      skip_cd: ${{ steps.flags.outputs.skip_cd }}
      skip_integration_tests: ${{ steps.flags.output.skip_integration_tests }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
      - name: Get Pull Request Info
        uses: 8BitJonny/gh-get-current-pr@2.0.0
        id: PR
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Verbose setting SHA when using Pull_Request event trigger to fix #16
          sha: ${{ github.event.pull_request.head.sha }}
          # Only return if PR is still open
          filterOutClosed: true
          # Only return if PR is not in draft state
          filterOutDraft: 0
      - name: Initialize Flags
        id: flags
        run: |
          echo "::set-output name=skip_cd::$(if [[ "$PR_BODY" == *"[x] Skip CD"* ]] ; then echo "true"; else echo "false"; fi)"
          echo "::set-output name=skip_integration_tests::$(if [[ "$PR_BODY" == *"[x] Skip feature tests against deployed environments"* ]] ; then echo "true"; else echo "false"; fi)"
        env:
          PR_BODY: ${{ steps.PR.outputs.pr_body }}
      - uses: actions/checkout@v3
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Test
        run: |
          echo "Not yet implemented"
  push-feature-dev:
    name: Push feature - DEV
    runs-on: ubuntu-latest
    needs: [test, initialize]
    if: startsWith(github.ref,'refs/heads/feat/') #&& ${{ needs.initialize.outputs.skip_cd == 'false' }}
    steps:
      - name: Setup
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Build
        working-directory: PracticalEmailManagement
        run: |
          npm install
          jq --null-input -c \
            --arg scriptId "$SCRIPT_ID" \
            '{"scriptId": $scriptId}' > .clasp.json 
          npm run build
        env:
          SCRIPT_ID: ${{ secrets.PRACTICAL_EMAIL_MANAGEMENT_DEV_ID }}
      - name: deploy
        working-directory: PracticalEmailManagement
        run: |
          echo $GOOGLE_APP_SCRIPT_CREDENTIALS > /home/runner/.clasprc.json
          npm run push
        env:
          GOOGLE_APP_SCRIPT_CREDENTIALS: ${{ secrets.GOOGLE_CLASP_CREDENTIALS }}
  publish-dev:
    name: Publish development - DEV
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [test, initialize, push-feature-dev]
    steps:
      - name: Setup
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Build
        working-directory: PracticalEmailManagement
        run: |
          npm install
          jq --null-input -c \
            --arg scriptId "$SCRIPT_ID" \
            '{"scriptId": $scriptId}' > .clasp.json 
          npm run build
        env:
          SCRIPT_ID: ${{ secrets.PRACTICAL_EMAIL_MANAGEMENT_DEV_ID }}
      - name: Publish
        working-directory: PracticalEmailManagement
        run: |
          echo $GOOGLE_APP_SCRIPT_CREDENTIALS > /home/runner/.clasprc.json
          echo $DEPLOYMENT_ID > deploy_id.txt
          npm run deploy
        env:
          GOOGLE_APP_SCRIPT_CREDENTIALS: ${{ secrets.GOOGLE_CLASP_CREDENTIALS }}
          DEPLOYMENT_ID: ${{ secrets.PRACTICAL_EMAIL_MANAGEMENT_DEPLOYMENT_ID_DEV }}
  push-feature-prod:
    name: Push feature - PROD
    runs-on: ubuntu-latest
    if: startsWith(github.ref,'refs/heads/release/') #&& ${{ needs.initialize.outputs.skip_cd == 'false' }}
    needs: [test, initialize]
    steps:
      - name: Setup
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Build
        working-directory: PracticalEmailManagement
        run: |
          npm install
          jq --null-input -c \
            --arg scriptId "$SCRIPT_ID" \
            '{"scriptId": $scriptId}' > .clasp.json 
          npm run build
        env:
          SCRIPT_ID: ${{ secrets.PRACTICAL_EMAIL_MANAGEMENT_PROD_ID }}
      - name: deploy
        working-directory: PracticalEmailManagement
        run: |
          echo $GOOGLE_APP_SCRIPT_CREDENTIALS > /home/runner/.clasprc.json
          npm run push
        env:
          GOOGLE_APP_SCRIPT_CREDENTIALS: ${{ secrets.GOOGLE_CLASP_CREDENTIALS }}
  publish-prod:
    name: Publish development - PROD
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, initialize, push-feature-prod]
    steps:
      - name: Setup
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Build
        working-directory: PracticalEmailManagement
        run: |
          npm install
          jq --null-input -c \
            --arg scriptId "$SCRIPT_ID" \
            '{"scriptId": $scriptId}' > .clasp.json 
          npm run build
        env:
          SCRIPT_ID: ${{ secrets.PRACTICAL_EMAIL_MANAGEMENT_PROD_ID }}
      - name: Publish
        working-directory: PracticalEmailManagement
        run: |
          echo $GOOGLE_APP_SCRIPT_CREDENTIALS > /home/runner/.clasprc.json
          echo $DEPLOYMENT_ID > deploy_id.txt
          npm run deploy
        env:
          GOOGLE_APP_SCRIPT_CREDENTIALS: ${{ secrets.GOOGLE_CLASP_CREDENTIALS }}
          DEPLOYMENT_ID: ${{ secrets.PRACTICAL_EMAIL_MANAGEMENT_DEPLOYMENT_ID_PROD }}
